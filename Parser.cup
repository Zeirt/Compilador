package compilador;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.File;
import java.util.Scanner;
import compilador.TablaSimbolos;
import java.util.Queue;
import java.util.LinkedList;
import java.util.NoSuchElementException;

parser code
{:

static public Scan lex;
static public ParserCup p;
static public TablaSimbolos tablaSimbolos;
static public Queue<String> colaDeclarados; //Utilizado para procesar declaraciones multiples en una linea
static public Ast arbol; //Para almacenar el AST
static public boolean hayErrores; //Para saber si hay errores en el programa o no

/** MAIN - LEER TOKENS */

public static void main (String argv[]) throws Exception
  {
    /*Comprobacacion del nombre del archivo*/
    if(argv.length<1){
    	System.err.println("Uso: java Parser nombreArchivo");
    	System.exit(1);
    }
    /* Asegurarse que la extension del archivo es correcta*/
	int aux = argv[0].indexOf('.');
	if(aux==-1){
		System.err.println("Error: El archivo debe acabar en .prog");
		System.exit(1);
	} else{
		if(!argv[0].substring(aux+1).equals("prog")){
			System.err.println("Error: El archivo debe acabar en .prog");
			System.exit(1);
		}
	}
	/* Inicializaion*/
	File archivo = new File(argv[0]);
    FileReader fr = new FileReader(archivo);
    tablaSimbolos = new TablaSimbolos();
    colaDeclarados = new LinkedList();
    hayErrores = false;
    arbol = new Ast();
    lex = new Scan(fr);
    p = new ParserCup(lex);
    p.parse();
}

/** NOTIFICAR ERROR DE SINTAXIS */
public void syntax_error(Symbol s) {
  report_error("Error de sintaxis linea " + s.left, null);
}

/** NOTIFICAR ERROR FATAL Y SALIR */
public void report_fatal_error(String message, Object info) {
  done_parsing();
  report_error("Error de sintaxis fatal : "
  + "No se puede recuperar del error y continuar con el analisis - "
  + message + " ",(Symbol)info);
  report_error("** Final del analisis.", null);
  System.exit(1);
}

public static boolean hayErroresFinales(){
	if(hayErrores) return true;
	else {
		if (lex.devolverErrores()) return true;
		else return false;
	}
}
:}

//scan with {: return scanner.next_token();:};

// TERMINALES Y NO TERMINALES
terminal PROGRAM, IS, BEGIN, END, VAR, INTEGER, BOOLEAN, READ, WRITE, SKIP, WHILE, DO, IF, THEN, ELSE;
terminal AND, OR, NOT, TRUE, FALSE, ASIGNACION, MENORIGUAL, MENOR, IGUAL, MAYOR, MAYORIGUAL, DISTINTOA;
terminal SUMA, RESTA, MULTIPLICACION, DIVISION, PUNTOCOMA, ABRIRPARENTESIS, CERRARPARENTESIS;
terminal COMA, DOSPUNTOS, ENTERO, IDENTIFICADOR;

non terminal programa, declararProg, bloqueDeclaraciones, declarar, declaracion, bloqueCodigo, condicion, sentencia, expresion;

// PRECEDENCIA DE OPERADORES
precedence left OR, AND, NOT;
precedence left DISTINTOA, MENORIGUAL, IGUAL, MAYORIGUAL, MENOR, MAYOR;
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;

// GRAMÁTICA

start with programa;

programa ::= declararProg: d bloqueDeclaraciones: bd BEGIN bloqueCodigo: bc END {:
				System.out.println("Programa completo");
				ParserCup.arbol.setRoot(new Nodo("Programa", "", (Nodo)d, (Nodo)bd, (Nodo)bc));
				if(ParserCup.hayErroresFinales()) System.err.println("Análisis acabado con errores");
				else System.out.println("Análisis acabado sin errores.");
			:}
			 | declararProg: d BEGIN bloqueCodigo: b END {:
				 System.out.println("Programa completo sin declaraciones");
			 ParserCup.arbol.setRoot(new Nodo("ProgramaSimple", "", (Nodo)d, (Nodo)b));
			 if(ParserCup.hayErroresFinales()) System.err.println("Análisis acabado con errores");
				else System.out.println("Análisis acabado sin errores.");
			 :};

declararProg ::= PROGRAM IDENTIFICADOR: v IS {:
				ParserCup.tablaSimbolos.insertarSimbolo((String)v,"pseudo");
				System.out.println("Comanzando programa llamado " + v);
				RESULT = new Nodo("DeclarPrograma", "", null, null);
				:};

bloqueDeclaraciones ::= declarar: d {:
							System.out.println("Declaracion acabada");
							RESULT = new Nodo("Declaraciones", "", (Nodo)d, null);
						:}
						| declarar: d bloqueDeclaraciones: b {:
							System.out.println("Declaraciones acabadas");
							RESULT = new Nodo("Declaraciones","", (Nodo)d, (Nodo)b);
						:};
						
declarar ::= VAR declaracion: d DOSPUNTOS: v INTEGER PUNTOCOMA 
			{:System.out.println("Integer declarado");
				while(!ParserCup.colaDeclarados.isEmpty()){
					if (ParserCup.tablaSimbolos.getSimbolo(ParserCup.colaDeclarados.peek()).equals("Undefined")){
						//No existe en la tabla. Se puede insertar
						String aux = (String)ParserCup.colaDeclarados.remove();
						ParserCup.tablaSimbolos.insertarSimbolo(aux,"Integer");
						RESULT = new Nodo("Declarar", "Integers", (Nodo)d, null);
					}
					else{
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Más de una variable de nombre " + ParserCup.colaDeclarados.remove() + " (Linea " + vleft + ")");
					}
				}
			:}
			| VAR declaracion: d DOSPUNTOS: v BOOLEAN PUNTOCOMA 
				{:System.out.println("Boolean declarado");
				while(!ParserCup.colaDeclarados.isEmpty()){
					if (ParserCup.tablaSimbolos.getSimbolo(ParserCup.colaDeclarados.peek()).equals("Undefined")){
						//No existe en la tabla. Se puede insertar
						String aux = (String)ParserCup.colaDeclarados.remove();
						ParserCup.tablaSimbolos.insertarSimbolo(aux,"Boolean");
						RESULT = new Nodo("Declarar", "Booleans", (Nodo)d, null);
					}
					else{
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Más de una variable de nombre " + ParserCup.colaDeclarados.remove() + " (Linea " + vleft + ")");
					}
				}
			:}
			| error PUNTOCOMA: p {: 
				System.err.println("Error sintáctico: Declaración mal formada en linea " + pleft);
				ParserCup.hayErrores = true;
			:};

declaracion ::= declaracion: d COMA IDENTIFICADOR: v {:
					System.out.println("Más de una variable");
					RESULT = new Nodo((String)v, "Var", (Nodo)d, null);
					ParserCup.colaDeclarados.add((String) v);
				:}
				| IDENTIFICADOR: v {:
					System.out.println("Una variable");
					RESULT = new Nodo((String)v, "Var", null, null);
					ParserCup.colaDeclarados.add((String)v);
				:};
				
bloqueCodigo ::= sentencia: s bloqueCodigo: b {:
					System.out.println("Bloque codigo");
					RESULT = new Nodo("Codigo", "", (Nodo)s, (Nodo)b);
				:}
				| sentencia: s {:
					System.out.println("Una sentencia de bloque");
					RESULT = new Nodo("Codigo", "",(Nodo)s, null); 
				:};
		
sentencia ::= IDENTIFICADOR: v ASIGNACION expresion: e PUNTOCOMA 
				{:
					Nodo auxn = new Nodo((String)v, "Integer", null, null);
					String aux = ParserCup.tablaSimbolos.getSimbolo(auxn.getValor());
					if (aux.equals("Void")){
						//No existe en la tabla. Error
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Asignación a variable no declarada (Linea " + vleft + ", Pos " + vright +")");
					}
					else{ //Si existe, comprobamos tipo
						if(!aux.equals("Integer")){
							//Tipo incorrecto. Error
							ParserCup.hayErrores = true;
							System.err.println("Error semántico: Asignación aritmetica a variable tipo " + aux + " (Linea " + vleft + ", Pos " + vright +")");
						}
						else {
							System.out.println("Asignacion Aritmetica");
							RESULT = new Nodo("Asig", "Sent", auxn, (Nodo)e);
						}
					}
				:}
				| IDENTIFICADOR: v ASIGNACION condicion: c PUNTOCOMA 
					{:
						Nodo auxn = new Nodo((String)v, "Boolean", null, null);
						String aux = ParserCup.tablaSimbolos.getSimbolo(auxn.getValor());
						if (aux.equals("Void")){
							//No existe en la tabla. Error
							ParserCup.hayErrores = true;
							System.err.println("Error semántico: Asignación a variable no declarada (Linea " + vleft + ", Pos " + vright +")");
						}
						else{ //Si existe, comprobamos tipo
							if(!aux.equals("Boolean")){
								//Tipo incorrecto. Error
								ParserCup.hayErrores = true;
								System.err.println("Error semántico: Asignación booleana a variable tipo " + aux + " (Linea " + vleft + ", Pos " + vright +")");
							}
							else{
								System.out.println("Asignacion Booleana");
								RESULT = new Nodo("Asig", "Sent", auxn, (Nodo)c);
							}
						}
					:}
				| READ expresion: e PUNTOCOMA {:
					System.out.println("Read");
					RESULT = new Nodo("Read", "Sent", (Nodo)e, null);
				:}
				| WRITE expresion: e PUNTOCOMA {:
					System.out.println("Write de expresion");
					RESULT = new Nodo("Write", "Sent", (Nodo)e, null);
				:}
				| WRITE condicion: c PUNTOCOMA {:
					System.out.println("Write de condicion");
					RESULT = new Nodo("Write", "Sent", (Nodo)c, null);
				:}
				| SKIP {:
					System.out.println("Skip");
					RESULT = new Nodo("Skip", "Sent", null, null); //Esta sentencia es especial y no hace nada
				:}
				| IF condicion: c THEN bloqueCodigo: b END IF PUNTOCOMA {:
					System.out.println("If simple");
					RESULT = new Nodo("If","Sent", (Nodo)c, (Nodo)b);
				:}
				| IF condicion: c THEN bloqueCodigo: b1 ELSE bloqueCodigo: b2 END IF PUNTOCOMA {:
					System.out.println("If con else");
					RESULT = new Nodo("IfElse", "Sent", (Nodo)c, (Nodo)b1, (Nodo)b2);
				:}
				| IF expresion: e THEN bloqueCodigo: b END IF PUNTOCOMA {:
					System.out.println("If simple con expresion");
					RESULT = new Nodo("If","Sent", (Nodo)e, (Nodo)b);
					Nodo aux = (Nodo) e;
					if(!aux.getLHijo().getTipo().equals("Boolean")){
						//Condicion tipo integer. No vale
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Condición del if no es boolean (linea " +eleft +")");
					}
				:}
				| IF expresion: e THEN bloqueCodigo: b1 ELSE bloqueCodigo: b2 END IF PUNTOCOMA {:
					System.out.println("If con else con expresion");
					RESULT = new Nodo("IfElse", "Sent", (Nodo)e, (Nodo)b1, (Nodo)b2);
					Nodo aux = (Nodo) e;
					if(!aux.getLHijo().getTipo().equals("Boolean")){
						//Condicion tipo integer. No vale
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Condición del if no es boolean (linea " +eleft +")");
					}
				:}
				| WHILE condicion: c DO bloqueCodigo: b END WHILE PUNTOCOMA {:
					System.out.println("Bucle");
					RESULT = new Nodo("While","Sent", (Nodo)c, (Nodo)b);
					Nodo aux = (Nodo) c;
					if(aux.getLHijo().getValor().equals("True")||aux.getLHijo().getValor().equals("False")){
						//Si la condicion es explicitamente true or false, no va a acabar. Avisa
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Detectado bucle infinito que empieza en linea " + cleft);
					}
				:}
				| WHILE expresion: e DO bloqueCodigo: b END WHILE PUNTOCOMA {:
					System.out.println("Bucle con expresion");
					RESULT = new Nodo("While","Sent", (Nodo)e, (Nodo)b);
					Nodo aux = (Nodo) e;
					if(!aux.getLHijo().getTipo().equals("Boolean")){
						//Condicion tipo integer. No vale
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Condición del bucle no es boolean (linea " +eleft +")");
					}
				:}
				| error PUNTOCOMA: p {:
					ParserCup.hayErrores = true;
					System.err.println("Error sintáctico: sentencia mal escrita en linea " + pleft);
				:};
				
condicion ::= TRUE {:
				RESULT = new Nodo("True", "Boolean", null, null);
				System.out.println("Condicion true");
			:}
			| FALSE {:
				RESULT = new Nodo("False", "Boolean", null, null);
				System.out.println("Condicion false");
			:}
			| ABRIRPARENTESIS condicion: c1 CERRARPARENTESIS {:
				RESULT = new Nodo("Parentesis", "Cond", (Nodo)c1, null);
				System.out.println("Condicion completa");
			:}
			| expresion: e1 DISTINTOA: v expresion: e2 {:
				Nodo aux1 = (Nodo)e1;
				Nodo aux2 = (Nodo)e2;
				if((aux1.getTipo().equals("Integer")||aux1.getTipo().equals("OP"))&&(aux2.getTipo().equals("Integer")||aux2.getTipo().equals("OP"))){
					RESULT = new Nodo((String)v, "OP", (Nodo)e1, (Nodo)e2);
					System.out.println("Condicion distintoa");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación de comparación" + " (Linea " + e1left + ")");
				}
			:}
			| expresion: e1 MENORIGUAL: v expresion: e2 {:
				Nodo aux1 = (Nodo)e1;
				Nodo aux2 = (Nodo)e2;
				if((aux1.getTipo().equals("Integer")||aux1.getTipo().equals("OP"))&&(aux2.getTipo().equals("Integer")||aux2.getTipo().equals("OP"))){
					RESULT = new Nodo((String)v, "OP", (Nodo)e1, (Nodo)e2);
					System.out.println("Condicion menorigual");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación de comparación" + " (Linea " + e1left + ")");
				}
			:}
			| expresion: e1 IGUAL: v expresion: e2 {:
				Nodo aux1 = (Nodo)e1;
				Nodo aux2 = (Nodo)e2;
				if((aux1.getTipo().equals("Integer")||aux1.getTipo().equals("OP"))&&(aux2.getTipo().equals("Integer")||aux2.getTipo().equals("OP"))){
					RESULT = new Nodo((String)v, "OP", (Nodo)e1, (Nodo)e2);
					System.out.println("Condicion igual");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación de comparación" + " (Linea " + e1left + ")");
				}
			:}
			| expresion: e1 MAYORIGUAL: v expresion: e2 {:
				Nodo aux1 = (Nodo)e1;
				Nodo aux2 = (Nodo)e2;
				if((aux1.getTipo().equals("Integer")||aux1.getTipo().equals("OP"))&&(aux2.getTipo().equals("Integer")||aux2.getTipo().equals("OP"))){
					RESULT = new Nodo((String)v, "OP", (Nodo)e1, (Nodo)e2);
					System.out.println("Condicion mayorigual");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación de comparación" + " (Linea " + e1left + ")");
				}
			:}
			| expresion: e1 MENOR: v expresion: e2 {:
				Nodo aux1 = (Nodo)e1;
				Nodo aux2 = (Nodo)e2;
				if((aux1.getTipo().equals("Integer")||aux1.getTipo().equals("OP"))&&(aux2.getTipo().equals("Integer")||aux2.getTipo().equals("OP"))){
					RESULT = new Nodo((String)v, "OP", (Nodo)e1, (Nodo)e2);
					System.out.println("Condicion menor");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación de comparación" + " (Linea " + e1left + ")");
				}
			:}
			| expresion: e1 MAYOR: v expresion: e2 {:
				Nodo aux1 = (Nodo)e1;
				Nodo aux2 = (Nodo)e2;
				if((aux1.getTipo().equals("Integer")||aux1.getTipo().equals("OP"))&&(aux2.getTipo().equals("Integer")||aux2.getTipo().equals("OP"))){
					RESULT = new Nodo((String)v, "OP", (Nodo)e1, (Nodo)e2);
					System.out.println("Condicion mayor");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación de comparación" + " (Linea " + e1left + ")");
				}
			:}
			| NOT: v condicion: e1 {:
				Nodo aux = (Nodo) e1;
				if(aux.getTipo().equals("Boolean") || aux.getTipo().equals("Cond")){
					RESULT = new Nodo ((String)v, "Cond", (Nodo) e1, null);
					System.out.println("Condicion not simple");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación not" + " (Linea " + e1left + ")");
				}
			:}
			| NOT: v expresion: e {:
				Nodo aux = (Nodo) e;
				if(aux.getTipo().equals("Boolean") || aux.getTipo().equals("Cond")){
					RESULT = new Nodo ((String)v, "Cond", (Nodo) e, null);
					System.out.println("Condicion not ambigua");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación not" + " (Linea " + vleft + ")");
				}
			:}
			| condicion: c1 OR: v condicion: c2 {:
				Nodo aux1 = (Nodo) c1;
				Nodo aux2 = (Nodo) c2;
				if((aux1.getTipo().equals("Boolean")||aux1.getTipo().equals("Cond"))&&(aux2.getTipo().equals("Boolean")||aux2.getTipo().equals("Cond"))){
					RESULT = new Nodo ((String)v, "Cond", (Nodo)c1, (Nodo)c2);
					System.out.println("Condicion or simple");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación not" + " (Linea " + c1left + ")");
				}
			:}
			| expresion: e1 OR: v expresion: e2 {:
				Nodo aux1 = (Nodo) e1;
				Nodo aux2 = (Nodo) e2;
				if((aux1.getTipo().equals("Boolean")||aux1.getTipo().equals("Cond"))&&(aux2.getTipo().equals("Boolean")||aux2.getTipo().equals("Cond"))){
					RESULT = new Nodo ((String)v, "Cond", (Nodo)e1, (Nodo)e2);
					System.out.println("Condicion or ambigua");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación or" + " (Linea " + e1left + ")");
				}
			:}
			| expresion: e OR: v condicion: c {:
				Nodo aux1 = (Nodo) e;
				Nodo aux2 = (Nodo) c;
				if((aux1.getTipo().equals("Boolean")||aux1.getTipo().equals("Cond"))&&(aux2.getTipo().equals("Boolean")||aux2.getTipo().equals("Cond"))){
					RESULT = new Nodo ((String)v, "Cond", (Nodo)e, (Nodo)c);
					System.out.println("Condicion or mixta");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación or" + " (Linea " + eleft + ")");
				}
			:}
			| condicion: c OR: v expresion: e {:
				Nodo aux1 = (Nodo) c;
				Nodo aux2 = (Nodo) e;
				if((aux1.getTipo().equals("Boolean")||aux1.getTipo().equals("Cond"))&&(aux2.getTipo().equals("Boolean")||aux2.getTipo().equals("Cond"))){
					RESULT = new Nodo ((String)v, "Cond", (Nodo)c, (Nodo)e);
					System.out.println("Condicion or mixta");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación or" + " (Linea " + cleft + ")");
				}
			:}
			| condicion: c1 AND: v condicion: c2 {:
				Nodo aux1 = (Nodo) c1;
				Nodo aux2 = (Nodo) c2;
				if((aux1.getTipo().equals("Boolean")||aux1.getTipo().equals("Cond"))&&(aux2.getTipo().equals("Boolean")||aux2.getTipo().equals("Cond"))){
					RESULT = new Nodo ((String)v, "Cond", (Nodo)c1, (Nodo)c2);
					System.out.println("Condicion and simple");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación and" + " (Linea " + c1left + ")");
				}
			:}
			| expresion: e1 AND: v expresion: e2 {:
				Nodo aux1 = (Nodo) e1;
				Nodo aux2 = (Nodo) e2;
				if((aux1.getTipo().equals("Boolean")||aux1.getTipo().equals("Cond"))&&(aux2.getTipo().equals("Boolean")||aux2.getTipo().equals("Cond"))){
					RESULT = new Nodo ((String)v, "Cond", (Nodo)e1, (Nodo)e2);
					System.out.println("Condicion and ambigua");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación and" + " (Linea " + e1left + ")");
				}
			:}
			| expresion: e AND: v condicion: c {:
				Nodo aux1 = (Nodo) e;
				Nodo aux2 = (Nodo) c;
				if((aux1.getTipo().equals("Boolean")||aux1.getTipo().equals("Cond"))&&(aux2.getTipo().equals("Boolean")||aux2.getTipo().equals("Cond"))){
					RESULT = new Nodo ((String)v, "Cond", (Nodo)e, (Nodo)c);
					System.out.println("Condicion and mixta");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación and" + " (Linea " + cleft + ")");
				}
			:}
			| condicion: c AND: v expresion: e {:
				Nodo aux1 = (Nodo) c;
				Nodo aux2 = (Nodo) e;
				if((aux1.getTipo().equals("Boolean")||aux1.getTipo().equals("Cond"))&&(aux2.getTipo().equals("Boolean")||aux2.getTipo().equals("Cond"))){
					RESULT = new Nodo ((String)v, "Cond", (Nodo)c, (Nodo)e);
					System.out.println("Condicion and simple");
				} else {
					ParserCup.hayErrores = true;
					System.err.println("Error semántico: Expresión de tipo inesperado en operación and" + " (Linea " + cleft + ")");
				}
			:};
			
expresion ::= IDENTIFICADOR: v {:
					String aux = ParserCup.tablaSimbolos.getSimbolo((String)v);
					if (aux.equals("Undefined")){
						//No existe en la tabla. Error
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Llamada a variable no declarada" + " (Linea " + vleft + ", Pos " + vright +")");
					} else {
						System.out.println("Expresion Identificador tipo " + aux);
						RESULT = new Nodo((String)v, aux, null, null);//creamos nodo con identificador y lo subimos
					}
				:}
				| ENTERO: v {:
					RESULT = new Nodo((String)v, "Integer", null, null);
					System.out.println("Expresion Entero");
				:}
				| ABRIRPARENTESIS expresion: e1 CERRARPARENTESIS {:
					Nodo aux = (Nodo) e1;
					RESULT = new Nodo ("Parentesis", aux.getTipo(), (Nodo)e1, null);
					System.out.println("expresion anidada");
				:}
				| expresion: e1 SUMA: v expresion: e2 {:
					Nodo aux1 = (Nodo)e1;
					Nodo aux2 = (Nodo)e2;
					if((aux1.getTipo().equals("Integer")||aux1.getTipo().equals("OP"))&&(aux2.getTipo().equals("Integer")||aux2.getTipo().equals("OP"))){
						RESULT = new Nodo((String)v, "OP", (Nodo)e1, (Nodo)e2);//Creamos nodo con hijos como operadores
						System.out.println("Expresion suma");
					} else {
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Expresión de tipo inesperado en operación de enteros" + " (Linea " + vleft + ")");
					}
				:}
				| expresion: e1 RESTA: v expresion: e2 {:
					Nodo aux1 = (Nodo)e1;
					Nodo aux2 = (Nodo)e2;
					if((aux1.getTipo().equals("Integer")||aux1.getTipo().equals("OP"))&&(aux2.getTipo().equals("Integer")||aux2.getTipo().equals("OP"))){
						RESULT = new Nodo((String)v, "OP", (Nodo)e1, (Nodo)e2);
						System.out.println("Expresion resto");
					} else {
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Expresión de tipo inesperado en operación de enteros" + " (Linea " + vleft + ")");
					}
				:}
				| expresion: e1 MULTIPLICACION: v expresion: e2 {:
					Nodo aux1 = (Nodo)e1;
					Nodo aux2 = (Nodo)e2;
					if((aux1.getTipo().equals("Integer")||aux1.getTipo().equals("OP"))&&(aux2.getTipo().equals("Integer")||aux2.getTipo().equals("OP"))){
						RESULT = new Nodo((String)v, "OP", (Nodo)e1, (Nodo)e2);
						System.out.println("Expresion multiplicacion");
					} else {
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Expresión de tipo inesperado en operación de enteros" + " (Linea " + vleft + ")");
					}
				:}
				| expresion: e1 DIVISION: v expresion: e2 {:
					Nodo aux1 = (Nodo)e1;
					Nodo aux2 = (Nodo)e2;
					if((aux1.getTipo().equals("Integer")||aux1.getTipo().equals("OP"))&&(aux2.getTipo().equals("Integer")||aux2.getTipo().equals("OP"))){
						RESULT = new Nodo((String)v, "OP", (Nodo)e1, (Nodo)e2);;
						System.out.println("Expresion división");
						if(aux2.getValor().equals("0")){
							ParserCup.hayErrores = true;
							System.err.println("Error semántico: Detectada división entre 0 en linea " + vleft);
						}
					} else {
						ParserCup.hayErrores = true;
						System.err.println("Error semántico: Expresión de tipo inesperado en operación de enteros" + " (Linea " + vleft + ")");
					}
				:};