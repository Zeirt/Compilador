package compilador;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.File;
import java.util.Scanner;
import compilador.TablaSimbolos;
import java.util.Queue;
import java.util.LinkedList;
import java.util.NoSuchElementException;

parser code
{:

static public TablaSimbolos tablaSimbolos;
static public Queue<String> colaDeclarados; //Utilizado para procesar declaraciones multiples en una linea
static public Queue<String> colaTipos; //Utilizado para comprobar concordancia de tipos en expresiones

/** MAIN - LEER TOKENS */

public static void main (String argv[]) throws Exception
  {
    /*Comprobacacion del nombre del archivo*/
    if(argv.length<1){
    	System.err.println("Uso: java Parser nombreArchivo");
    	System.exit(1);
    }
    /* Asegurarse que la extension del archivo es correcta*/
	int aux = argv[0].indexOf('.');
	if(aux==-1){
		System.err.println("Error: El archivo debe acabar en .prog");
		System.exit(1);
	} else{
		if(!argv[0].substring(aux+1).equals("prog")){
			System.err.println("Error: El archivo debe acabar en .prog");
			System.exit(1);
		}
	}
	/* Inicializaion*/
	File archivo = new File(argv[0]);
    FileReader fr = new FileReader(archivo);
    tablaSimbolos = new TablaSimbolos();
    colaDeclarados = new LinkedList();
    colaTipos = new LinkedList();
    Scan lex = new Scan(fr);
    ParserCup p = new ParserCup(lex);
    p.parse();
}

/** NOTIFICAR ERROR DE SINTAXIS */
public void syntax_error(Symbol s) {
  report_error("Error de sintaxis linea " + s.left, null);
}

/** NOTIFICAR ERROR FATAL Y SALIR */
public void report_fatal_error(String message, Object info) {
  done_parsing();
  report_error("Error de sintaxis fatal : "
  + "No se puede recuperar del error y continuar con el analisis - "
  + message + " ",(Symbol)info);
  report_error("** Final del analisis.", null);
  System.exit(1);
}
:}

//scan with {: return scanner.next_token();:};

// TERMINALES Y NO TERMINALES
terminal PROGRAM, IS, BEGIN, END, VAR, INTEGER, BOOLEAN, READ, WRITE, SKIP, WHILE, DO, IF, THEN, ELSE;
terminal AND, OR, NOT, TRUE, FALSE, ASIGNACION, MENORIGUAL, MENOR, IGUAL, MAYOR, MAYORIGUAL, DISTINTOA;
terminal SUMA, RESTA, MULTIPLICACION, DIVISION, PUNTOCOMA, ABRIRPARENTESIS, CERRARPARENTESIS;
terminal COMA, DOSPUNTOS, ENTERO, IDENTIFICADOR;

non terminal programa, declararProg, bloqueDeclaraciones, declarar, declaracion, bloqueCodigo, condicion, sentencia, expresion;

// PRECEDENCIA DE OPERADORES
precedence left OR, AND, NOT;
precedence left DISTINTOA, MENORIGUAL, IGUAL, MAYORIGUAL, MENOR, MAYOR;
precedence left SUMA, RESTA;
precedence left MULTIPLICACION, DIVISION;

// GRAMÁTICA

start with programa;

programa ::= declararProg bloqueDeclaraciones BEGIN bloqueCodigo END {:System.out.println("Programa completo");:}
			 | declararProg BEGIN bloqueCodigo END {:System.out.println("Programa completo sin declaraciones");:};

declararProg ::= PROGRAM IDENTIFICADOR: v IS {:ParserCup.tablaSimbolos.insertarSimbolo((String)v,"pseudo");
												System.out.println("Comanzando programa llamado " + v);:};

bloqueDeclaraciones ::= declarar {:System.out.println("Declaracion acabada");:}
						| declarar bloqueDeclaraciones {:System.out.println("Declaraciones acabadas");:};
						
declarar ::= VAR declaracion DOSPUNTOS: v INTEGER PUNTOCOMA 
			{:System.out.println("Integer declarado");
				while(!ParserCup.colaDeclarados.isEmpty()){
					if (ParserCup.tablaSimbolos.getSimbolo(ParserCup.colaDeclarados.peek()).equals("Void")){
						//No existe en la tabla. Se puede insertar
						String aux = (String)ParserCup.colaDeclarados.remove();
						ParserCup.tablaSimbolos.insertarSimbolo(aux,"Integer");
					}
					else{
						System.err.println("Error semántico: Más de una variable de nombre " + ParserCup.colaDeclarados.remove() + " (Linea " + vleft + ")");
					}
				}
			:}
			| VAR declaracion DOSPUNTOS: v BOOLEAN PUNTOCOMA 
				{:System.out.println("Boolean declarado");
				while(!ParserCup.colaDeclarados.isEmpty()){
					if (ParserCup.tablaSimbolos.getSimbolo(ParserCup.colaDeclarados.peek()).equals("Void")){
						//No existe en la tabla. Se puede insertar
						String aux = (String)ParserCup.colaDeclarados.remove();
						ParserCup.tablaSimbolos.insertarSimbolo(aux,"Boolean");
					}
					else{
						System.err.println("Error semántico: Más de una variable de nombre " + ParserCup.colaDeclarados.remove() + " (Linea " + vleft + ")");
					}
				}
			:};

declaracion ::= declaracion COMA IDENTIFICADOR: v {:System.out.println("Más de una variable");
													ParserCup.colaDeclarados.add((String)v);:}
				| IDENTIFICADOR: v {:System.out.println("Una variable");
									ParserCup.colaDeclarados.add((String)v);:};
				
bloqueCodigo ::= sentencia bloqueCodigo {:System.out.println("Bloque codigo");:}
				| sentencia {:System.out.println("Una sentencia de bloque");:};
		
sentencia ::= IDENTIFICADOR: v ASIGNACION expresion PUNTOCOMA 
				{:String aux = ParserCup.tablaSimbolos.getSimbolo((String)v);
					if (aux.equals("Void")){
						//No existe en la tabla. Error
						System.err.println("Error semántico: Asignación a variable no declarada (Linea " + vleft + ", Pos " + vright +")");
					}
					else{ //Si existe, comprobamos tipo
						if(!aux.equals("Integer")){
							//Tipo incorrecto. Error
							System.err.println("Error semántico: Asignación aritmetica a variable tipo " + aux + " (Linea " + vleft + ", Pos " + vright +")");
						}
						else System.out.println("Asignacion Aritmetica");
					}
					ParserCup.colaTipos.clear();//Vaciamos la cola de tipos
				:}
				| IDENTIFICADOR: v ASIGNACION condicion PUNTOCOMA 
					{:String aux = ParserCup.tablaSimbolos.getSimbolo((String)v);
						if (aux.equals("Void")){
							//No existe en la tabla. Error
							System.err.println("Error semántico: Asignación a variable no declarada (Linea " + vleft + ", Pos " + vright +")");
						}
						else{ //Si existe, comprobamos tipo
							if(!aux.equals("Boolean")){
								//Tipo incorrecto. Error
								System.err.println("Error semántico: Asignación booleana a variable tipo " + aux + " (Linea " + vleft + ", Pos " + vright +")");
							}
							else System.out.println("Asignacion Booleana");
						}
						ParserCup.colaTipos.clear();//Vaciamos la cola de tipos
					:}
				| READ expresion PUNTOCOMA {:
					ParserCup.colaTipos.clear();//Vaciamos la cola de tipos
					System.out.println("Read");
				:}
				| WRITE expresion PUNTOCOMA {:
					ParserCup.colaTipos.clear();//Vaciamos la cola de tipos
					System.out.println("Write de expresion");
				:}
				| WRITE condicion PUNTOCOMA {:
					ParserCup.colaTipos.clear();//Vaciamos la cola de tipos
					System.out.println("Write de condicion");
				:}
				| SKIP {:System.out.println("Skip");:}
				| IF condicion THEN bloqueCodigo END IF PUNTOCOMA {:System.out.println("If simple");:}
				| IF condicion THEN bloqueCodigo ELSE bloqueCodigo END IF PUNTOCOMA {:System.out.println("If con else");:}
				| IF expresion THEN bloqueCodigo END IF PUNTOCOMA {:System.out.println("If simple con expresion!");:}
				| IF expresion THEN bloqueCodigo ELSE bloqueCodigo END IF PUNTOCOMA {:System.out.println("If con else con expresion!");:}
				| WHILE condicion DO bloqueCodigo END WHILE PUNTOCOMA {:System.out.println("Bucle");:}
				| WHILE expresion DO bloqueCodigo END WHILE PUNTOCOMA {:System.out.println("Bucle con expresion!");:};
				
condicion ::= TRUE {:System.out.println("Condicion true");:}
			| FALSE {:System.out.println("Condicion false");:}
			| ABRIRPARENTESIS condicion CERRARPARENTESIS {:
				System.out.println("Condicion completa");
				ParserCup.colaTipos.clear();
			:}
			| expresion DISTINTOA expresion {:System.out.println("Condicion distintoa");:}
			| expresion MENORIGUAL expresion {:System.out.println("Condicion menorigual");:}
			| expresion IGUAL expresion {:System.out.println("Condicion igual");:}
			| expresion MAYORIGUAL expresion {:System.out.println("Condicion mayorigual");:}
			| expresion MENOR expresion {:System.out.println("Condicion menor");:}
			| expresion MAYOR expresion {:System.out.println("Condicion mayor");:}
			| NOT condicion {:System.out.println("Condicion not bool");:}
			| NOT: v expresion {:
				System.out.println("Condicion not ambigua");
				String aux = "Undefined";
				//Vaciar cola para comprobar concordancia. Mal en cuanto encuentra algo que no sea Booleano
				aux = ParserCup.colaTipos.remove();
				if(!aux.equals("Boolean")){
					//Incorrecto. Aununcia error y vacía
					System.err.println("Error semántico: Expresión " + aux + " inesperada en operación de booleana" + " (Linea " + vleft + ")");
					ParserCup.colaTipos.clear();
				}
				if (!aux.equals("Boolean")) ParserCup.colaTipos.add("Undefined");//Si estaba mal, metemos un tipo malo para tirar toda la expresión anidada si la hubiera
				//else ParserCup.colaTipos.add("Boolean");
				:}
			| condicion OR condicion {:System.out.println("Condicion or");:}
			| condicion AND condicion {:System.out.println("Condicion and");:};
			
expresion ::= IDENTIFICADOR: v {:
					String aux = ParserCup.tablaSimbolos.getSimbolo((String)v);
					if (aux.equals("Void")){
						//No existe en la tabla. Error
						System.err.println("Error semántico: Llamada a variable no declarada" + " (Linea " + vleft + ", Pos " + vright +")");
					} else {
						ParserCup.colaTipos.add(aux); //Añadimos el tipo a la cola para evaluar
					}
					System.out.println("Expresion Identificador tipo " + aux);
				:}
				| ENTERO {:
					System.out.println("Expresion Entero");
					ParserCup.colaTipos.add("Integer");
				:}
				| ABRIRPARENTESIS expresion CERRARPARENTESIS {:
					String aux = ParserCup.colaTipos.peek();
					ParserCup.colaTipos.clear();
					ParserCup.colaTipos.add(aux);//Metemos un tipo para mantener la referencia
					System.out.println("expresion anidada");
				:}
				| expresion SUMA: v expresion {:
					String aux = "Undefined";
					while(!ParserCup.colaTipos.isEmpty()){
						//Vaciar cola para comprobar concordancia. Mal en cuanto encuentra algo que no sea Integer
						aux = ParserCup.colaTipos.remove();
						if(!aux.equals("Integer")){
							//Incorrecto. Aununcia error y vacía
							System.err.println("Error semántico: Expresión " + aux + " inesperada en operación de enteros" + " (Linea " + vleft + ")");
							ParserCup.colaTipos.clear();
						}
					}
					if (!aux.equals("Integer")) ParserCup.colaTipos.add("Undefined");//Si estaba mal, metemos un tipo malo para tirar toda la expresión anidada si la hubiera
					else ParserCup.colaTipos.add("Integer");
					System.out.println("Expresion suma");
				:}
				| expresion RESTA: v expresion {:
					String aux = "Undefined";
					while(!ParserCup.colaTipos.isEmpty()){
						//Vaciar cola para comprobar concordancia. Mal en cuanto encuentra algo que no sea Integer
						aux = ParserCup.colaTipos.remove();
						if(!aux.equals("Integer")){
							//Incorrecto. Aununcia error y vacía
							System.err.println("Error semántico: Expresión " + aux + " inesperada en operación de enteros" + " (Linea " + vleft + ")");
							ParserCup.colaTipos.clear();
						}
					}
					if (!aux.equals("Integer")) ParserCup.colaTipos.add("Undefined"); //Si estaba mal, metemos un tipo malo para tirar toda la expresión anidada si la hubiera
					else ParserCup.colaTipos.add("Integer");
					System.out.println("Expresion resta");
				:}
				| expresion MULTIPLICACION: v expresion {:
					String aux = "Undefined";
					while(!ParserCup.colaTipos.isEmpty()){
						//Vaciar cola para comprobar concordancia. Mal en cuanto encuentra algo que no sea Integer
						aux = ParserCup.colaTipos.remove();
						if(!aux.equals("Integer")){
							//Incorrecto. Aununcia error y vacía
							System.err.println("Error semántico: Expresión " + aux + " inesperada en operación de enteros" + " (Linea " + vleft + ")");
							ParserCup.colaTipos.clear();
						}
					}
					if (!aux.equals("Integer")) ParserCup.colaTipos.add("Undefined"); //Si estaba mal, metemos un tipo malo para tirar toda la expresión anidada si la hubiera
					else ParserCup.colaTipos.add("Integer");
					System.out.println("Expresion multiplicacion");
				:}
				| expresion DIVISION: v expresion {:
					String aux = "Undefined";
					while(!ParserCup.colaTipos.isEmpty()){
						//Vaciar cola para comprobar concordancia. Mal en cuanto encuentra algo que no sea Integer
						aux = ParserCup.colaTipos.remove();
						if(!aux.equals("Integer")){
							//Incorrecto. Aununcia error y vacía
							System.err.println("Error semántico: Expresión " + aux + " inesperada en operación de enteros" + " (Linea " + vleft + ")");
							ParserCup.colaTipos.clear();
						}
					}
					if (!aux.equals("Integer")) ParserCup.colaTipos.add("Undefined"); //Si estaba mal, metemos un tipo malo para tirar toda la expresión anidada si la hubiera
					else ParserCup.colaTipos.add("Integer");
					System.out.println("Expresion division");:};